# -*- coding: utf-8 -*-
"""The Overlay Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z5CaUrrjjABkfbBDsdcEwgGaqzvYCo0w
"""

"""
There are TWO Model functions listed below. The first is a generalized version of the model where
you can input the file and filepaths. This was edited from the second Model function (which is 
the original code but specific to a file and a filepath) so there MIGHT be some parameters that 
specific to the example file (phiphiandsouthphuket_topography). To use the first Model function,
go to the GIS lab in the BYU library, set up your network drive, open a new project in ArcGIS, import
all of your files, go to the Analysis tab, click on Python, copy and paste the first Model function,
edit and input your files and filepaths. Make sure you read all the comments below before running.

The second Model function is the original code but pertaining to a specific file 
(phiphiandsouthphuket_topography). If you run into any syntax errors from the first Model function,
you can check them with the syntax of the second Model function.

ALTERNATIVELY and recommended, while the GIS employees could help you with the parameters in the 
Python code, they are more familiar with the model interface. This is available as a figure (image) 
in the paper "Developing a Scenario to Validate the Tsunamibayes Methodology". This will allow them 
to remake the model with the necessary tools quickly and adjust the parameters with interface.
"""

from sys import argv
def Model(Input_Topography=,#input topography filename as string 
          Input_Bathymetry=,#input filepath of bathymetry file 
          Input_Topo_2=, #input topography filename as string
          Output_Ocean=,#filepath where you want to save your Output_Ocean file
          Output_Land=#filepath where you want to save your Output_Landfile
          ):

    # To allow overwriting outputs change overwriteOutput option to True.
    # ArcGIS will throw an error when rerunning a cell that would overwrite a file. I suggest
    # changing this to True
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    project_path="W:\\tsunamidata-selected\\ArcGIS\\Projects\\project_folder"

    # Process: Resample (Resample) (management)
    Ocean_resample = project_path+"\\my_gis_project.gdb\\Ocean_resample"
    oCS = "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]"
    with arcpy.EnvManager(outputCoordinateSystem=oCS, 
                          snapRaster=Input_Topo_2):
        arcpy.management.Resample(in_raster=Input_Bathymetry, 
                                  out_raster=Ocean_resample, 
                                  cell_size="1.66666666666667E-03 1.66666666666667E-03", 
                                  resampling_type="NEAREST")
        Ocean_resample = arcpy.Raster(Ocean_resample)

    # Process: Reclassify (Reclassify) (sa)
    Ocean_Land = project_path+"\\my_gis_project.gdb\\Ocean_Land"
    Reclassify = Ocean_Land
    Ocean_Land = arcpy.sa.Reclassify(in_raster=Input_Topography, 
                                     reclass_field="Value", 
                                     remap="-42 2 1;2 539 2", 
                                     missing_values="DATA")
    Ocean_Land.save(Reclassify)


    # Process: Raster to Polygon (Raster to Polygon) (conversion)
    Ocean_Water_Mask =project_path+"\\my_gis_project.gdb\\Ocean_Water_Mask"
    #put "MULTIPLE_OUTER_PART", on the same line as create_multipart_features
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPolygon(in_raster=Ocean_Land, 
                                         out_polygon_features=Ocean_Water_Mask, 
                                         simplify="SIMPLIFY", 
                                         raster_field="Value", 
                                         create_multipart_features="MULTIPLE_OUTER_PART",
                                         max_vertices_per_feature=None)

    # Process: Select (Select) (analysis)
    Ocean_Mask = project_path+"\\my_gis_project.gdb\\Ocean_Mask"
    arcpy.analysis.Select(in_features=Ocean_Water_Mask, 
                          out_feature_class=Ocean_Mask, 
                          where_clause="gridcode = 1")

    # Process: Extract by Mask (Extract by Mask) (sa)
    Extract_by_Mask = Output_Ocean
    #cellSize=r"W:\tsunamidata-selected\ArcGIS\Projects\project_folder
    #\n07_e098_1arc_v3.tif"
    with arcpy.EnvManager(cellSize=,#(See comment above) 
                          outputCoordinateSystem=oCS, 
                          snapRaster=Input_Topo_2
                          ):
        Output_Ocean = arcpy.sa.ExtractByMask(in_raster=Ocean_resample, 
                                              in_mask_data=Ocean_Mask)
        Output_Ocean.save(Extract_by_Mask)


    # Process: Select (2) (Select) (analysis)
    Land_mask = project_path+"\\my_gis_project.gdb\\Land_mask"
    arcpy.analysis.Select(in_features=Ocean_Water_Mask, 
                          out_feature_class=Land_mask, 
                          where_clause="gridcode = 2")

    # Process: Extract by Mask (2) (Extract by Mask) (sa)
    Extract_by_Mask_2_ = Output_Land
    Output_Land = arcpy.sa.ExtractByMask(in_raster=Input_Topo_2, 
                                         in_mask_data=Land_mask)
    Output_Land.save(Extract_by_Mask_2_)


    # Process: Mosaic To New Raster (2) (Mosaic To New Raster) (management)
    #remove \n\ from coordinate_system_for_the_raster and put it all on one line
    all_data_tif = arcpy.management.MosaicToNewRaster(
        input_rasters=[Output_Ocean, Output_Land], 
        output_location=project_path, 
        raster_dataset_name_with_extension="all_data.tif", 
        coordinate_system_for_the_raster=oCS, 
        pixel_type="8_BIT_UNSIGNED", 
        cellsize=None, 
        number_of_bands=1, 
        mosaic_method="LAST", 
        mosaic_colormap_mode="FIRST")[0]
    all_data_tif = arcpy.Raster(all_data_tif)

    # Process: Mosaic (Mosaic) (management)
    Updated_Target_Raster = arcpy.management.Mosaic(
        inputs=[Output_Ocean, Output_Land], 
        target=all_data_tif, 
        mosaic_type="LAST", 
        colormap="FIRST", 
        background_value=None, 
        nodata_value=None, 
        onebit_to_eightbit="NONE", 
        mosaicking_tolerance=0, 
        MatchingMethod="NONE")[0]
    Updated_Target_Raster = arcpy.Raster(Updated_Target_Raster)

    return all_data_tif, Updated_Target_Raster

if __name__ == '__main__':
    # Global Environment settings
    #scratchWorkspace=r"W:\tsunamidata-selected\ArcGIS\Projects\project_folder
    #\my_gis_project.gdb", 
    #workspace=r"W:\tsunamidata-selected\ArcGIS\Projects\project_folder
    #\my_gis_project.gdb"
    with arcpy.EnvManager(scratchWorkspace=, #(see comment above)
                          workspace= #(see comment above)
                          ):
        Model(*argv[1:])

from sys import argv
def Model(Input_Topography="phiphiandsouthphuket_topography", 
          Input_Bathymetry="W:\\tsunamidata-selected\\BATNAS_095E-100E_05N-10N_MSL_v1.1.tif", 
          Input_Topo_2="phiphiandsouthphuket_topography", 
          Output_Ocean="W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Ocean", 
          Output_Land="W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Land"):  # Model

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    CarolsResearch_2_ = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch"

    # Process: Resample (Resample) (management)
    Ocean_resample = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Ocean_resample"
    with arcpy.EnvManager(outputCoordinateSystem="GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]", 
                          snapRaster="phiphiandsouthphuket_topography"):
        arcpy.management.Resample(in_raster=Input_Bathymetry, 
                                  out_raster=Ocean_resample, 
                                  cell_size="1.66666666666667E-03 1.66666666666667E-03", 
                                  resampling_type="NEAREST")
        Ocean_resample = arcpy.Raster(Ocean_resample)

    # Process: Reclassify (Reclassify) (sa)
    Ocean_Land = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Ocean_Land"
    Reclassify = Ocean_Land
    Ocean_Land = arcpy.sa.Reclassify(in_raster=Input_Topography, 
                                     reclass_field="Value", 
                                     remap="-42 2 1;2 539 2", 
                                     missing_values="DATA")
    Ocean_Land.save(Reclassify)


    # Process: Raster to Polygon (Raster to Polygon) (conversion)
    Ocean_Water_Mask = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Ocean_Water_Mask"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPolygon(in_raster=Ocean_Land, 
                                         out_polygon_features=Ocean_Water_Mask, 
                                         simplify="SIMPLIFY", 
                                         raster_field="Value", 
                                         create_multipart_features="MULTIPLE_OUTER_PART", 
                                         max_vertices_per_feature=None)

    # Process: Select (Select) (analysis)
    Ocean_Mask = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Ocean_Mask"
    arcpy.analysis.Select(in_features=Ocean_Water_Mask, 
                          out_feature_class=Ocean_Mask, 
                          where_clause="gridcode = 1")

    # Process: Extract by Mask (Extract by Mask) (sa)
    Extract_by_Mask = Output_Ocean
    with arcpy.EnvManager(cellSize=r"W:\tsunamidata-selected\ArcGIS\Projects\CarolsResearch\n07_e098_1arc_v3.tif", 
                          outputCoordinateSystem="GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]", 
                          snapRaster="phiphiandsouthphuket_topography"):
        Output_Ocean = arcpy.sa.ExtractByMask(in_raster=Ocean_resample, 
                                              in_mask_data=Ocean_Mask)
        Output_Ocean.save(Extract_by_Mask)


    # Process: Select (2) (Select) (analysis)
    Land_mask = "W:\\tsunamidata-selected\\ArcGIS\\Projects\\CarolsResearch\\CarolsResearch.gdb\\Land_mask"
    arcpy.analysis.Select(in_features=Ocean_Water_Mask, 
                          out_feature_class=Land_mask, 
                          where_clause="gridcode = 2")

    # Process: Extract by Mask (2) (Extract by Mask) (sa)
    Extract_by_Mask_2_ = Output_Land
    Output_Land = arcpy.sa.ExtractByMask(in_raster=Input_Topo_2, 
                                         in_mask_data=Land_mask)
    Output_Land.save(Extract_by_Mask_2_)


    # Process: Mosaic To New Raster (2) (Mosaic To New Raster) (management)
    all_data_tif = arcpy.management.MosaicToNewRaster(
        input_rasters=[Output_Ocean, Output_Land], 
        output_location=CarolsResearch_2_, 
        raster_dataset_name_with_extension="all_data.tif", 
        coordinate_system_for_the_raster="GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]", 
        pixel_type="8_BIT_UNSIGNED", 
        cellsize=None, 
        number_of_bands=1, 
        mosaic_method="LAST", 
        mosaic_colormap_mode="FIRST")[0]
    all_data_tif = arcpy.Raster(all_data_tif)

    # Process: Mosaic (Mosaic) (management)
    Updated_Target_Raster = arcpy.management.Mosaic(
        inputs=[Output_Ocean, Output_Land], 
        target=all_data_tif, 
        mosaic_type="LAST", 
        colormap="FIRST", 
        background_value=None, 
        nodata_value=None, 
        onebit_to_eightbit="NONE", 
        mosaicking_tolerance=0, 
        MatchingMethod="NONE")[0]
    Updated_Target_Raster = arcpy.Raster(Updated_Target_Raster)

    return all_data_tif, Updated_Target_Raster

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"W:\tsunamidata-selected\ArcGIS\Projects\CarolsResearch\CarolsResearch.gdb", workspace=r"W:\tsunamidata-selected\ArcGIS\Projects\CarolsResearch\CarolsResearch.gdb"):
        Model(*argv[1:])

